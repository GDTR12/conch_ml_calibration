PACKAGE = "ml_calib"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

optimization = gen.add_group("optimizationConfig")
optimization.add("use_ground_optimization", bool_t, 0, "Use optimization", False)
optimization.add("plane_threshold", double_t, 0, "Maximum number of iterations for optimization", 0.03, 0, 1.0)
optimization.add("ground_radius_threshold", double_t, 0, "Radius for ground", 100, 0, 100)
optimization.add("fl_weight", double_t, 0, "Weight for front left lidar", 1.0, 0.0, 10.0)
optimization.add("fr_weight", double_t, 0, "Weight for front right lidar", 1.0, 0.0, 10.0)
optimization.add("lr_weight", double_t, 0, "Weight for left right lidar", 1.0, 0.0, 10.0)
optimization.add("bl_weight", double_t, 0, "Weight for back left lidar", 1.0, 0.0, 10.0)
optimization.add("br_weight", double_t, 0, "Weight for back right lidar", 1.0, 0.0, 10.0)

front_lidar = gen.add_group("front_lidarConfig")
front_lidar.add("x", double_t, 0, "A double parameter", 0.0, -100, 100)
front_lidar.add("y", double_t, 0, "A double parameter", 0.0, -100, 100)
front_lidar.add("z", double_t, 0, "A double parameter", 0.0, -100, 100)
front_lidar.add("pitch_x", double_t, 0, "A double parameter", 0.0, -180.0, 180.0)
front_lidar.add("roll_y", double_t, 0, "A double parameter", 0.0, -180.0, 180.0)
front_lidar.add("yaw_z", double_t, 0, "A double parameter", 0.0, -180.0, 180.0)


patchworkpp = gen.add_group("patchworkppConfig")
patchworkpp.add("verbose", bool_t, 0, "Enable verbose output", True)
patchworkpp.add("RNR", bool_t, 0, "Enable RNR", True)
patchworkpp.add("RVPF", bool_t, 0, "Enable RNR", True)
patchworkpp.add("TGR", bool_t, 0, "Enable TGR", True)

patchworkpp.add("num_iter",     int_t,  0, "Number of iterations for ground plane estimation using PCA.", 3, 1, 100)
patchworkpp.add("num_lpr",      int_t,  0, "Maximum number of points to be selected as lowest points representative.", 20, 1, 100)
patchworkpp.add("num_min_pts",  int_t,  0, "Minimum number of points to be estimated as ground plane in each patch.", 10, 1, 100)
patchworkpp.add("num_zones",    int_t,  0, "Number of concentric zones (CZM).", 4, 1, 10)
patchworkpp.add("num_rings_of_interest", int_t, 0, "Number of rings to check elevation/flatness.", 0, 0, 4)

patchworkpp.add("max_flatness_storage", int_t, 0, "Max number of flatness records", 1000, 1, 5000)
patchworkpp.add("max_elevation_storage", int_t, 0, "Max number of elevation records", 1000, 1, 5000)

# Double Parameters
patchworkpp.add("RNR_ver_angle_thr", double_t, 0, "Noise vertical angle threshold", -15.0, -90.0, 90.0)
patchworkpp.add("RNR_intensity_thr", double_t, 0, "Noise intensity threshold", 0.2, 0.0, 1.0)

patchworkpp.add("sensor_height", double_t, 0, "Sensor height", 0.023, 0.0, 2.0)
patchworkpp.add("th_seeds", double_t, 0, "Seed selection threshold for ground", 0.125, 0.0, 1.0)
patchworkpp.add("th_dist", double_t, 0, "Distance threshold for ground", 0.125, 0.0, 1.0)
patchworkpp.add("th_seeds_v", double_t, 0, "Seed selection threshold for vertical structure", 0.25, 0.0, 1.0)
patchworkpp.add("th_dist_v", double_t, 0, "Distance threshold for vertical structure", 0.1, 0.0, 1.0)

patchworkpp.add("max_range", double_t, 0, "Max range for ground estimation", 80.0, 0.0, 200.0)
patchworkpp.add("min_range", double_t, 0, "Min range for ground estimation", 0.0, 0.0, 50.0)
patchworkpp.add("uprightness_thr", double_t, 0, "Threshold of uprightness for GLE", 0.707, 0.0, 1.0)
patchworkpp.add("adaptive_seed_selection_margin", double_t, 0, "Adaptive seed selection margin", -1.2, -10.0, 10.0)

exit(gen.generate(PACKAGE, "ml_calib", "ml_calib"))